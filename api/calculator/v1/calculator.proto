syntax = "proto3";

package calculator.v1;

import "calculator/v1/agent.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "edu-final-calculate-api/pkg/calculator/v1;v1";

// Processes arithmetic expressions.
service CalculatorService {
  // Submits an arithmetic expression for calculation.
  rpc Calculate(CalculateRequest) returns (CalculateResponse) {
    option (google.api.http) = {
      post: "/api/v1/calculate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "201"
        value: {
          description: "Expression accepted for calculation"
          schema: {
            json_schema: {ref: ".calculator.v1.CalculateResponse"}
          }
        }
      }
    };
  }

  // Lists all expressions.
  rpc ListExpressions(google.protobuf.Empty) returns (ListExpressionsResponse) {
    option (google.api.http) = {get: "/api/v1/expressions"};
  }

  // Gets expression by identifier.
  rpc GetExpression(GetExpressionRequest) returns (GetExpressionResponse) {
    option (google.api.http) = {get: "/api/v1/expressions/{id}"};
  }

  // Lists tasks for specified expression.
  rpc ListExpressionTasks(ListExpressionTasksRequest) returns (ListExpressionTasksResponse) {
    option (google.api.http) = {get: "/api/v1/expressions/{id}/tasks"};
  }
}

// Arithmetic expression submission.
message CalculateRequest {
  // Expression to calculate.
  string expression = 1;
}

// Data after expression submission.
message CalculateResponse {
  // Unique identifier.
  string id = 1;
}

// Expression calculation states.
enum ExpressionStatus {
  // Status not specified.
  EXPRESSION_STATUS_UNSPECIFIED = 0;
  // Waiting for calculation.
  EXPRESSION_STATUS_PENDING = 1;
  // Currently calculating.
  EXPRESSION_STATUS_IN_PROGRESS = 2;
  // Calculation successful.
  EXPRESSION_STATUS_COMPLETED = 3;
  // Calculation failed.
  EXPRESSION_STATUS_FAILED = 4;
}

// Arithmetic expression information.
message Expression {
  // Unique identifier.
  string id = 1;
  // Original expression string.
  string expression = 2;
  // Calculation status.
  ExpressionStatus status = 3;
  // Calculation result.
  double result = 4;
}

// List of expressions.
message ListExpressionsResponse {
  // Available expressions.
  repeated Expression expressions = 1;
}

// Expression lookup information.
message GetExpressionRequest {
  // Expression identifier.
  string id = 1;
}

// Single expression data.
message GetExpressionResponse {
  // Requested expression.
  Expression expression = 1;
}

// Task processing states.
enum TaskStatus {
  // Status not specified.
  TASK_STATUS_UNSPECIFIED = 0;
  // Task created.
  TASK_STATUS_CREATED = 1;
  // Waiting for processing.
  TASK_STATUS_PENDING = 2;
  // Currently processing.
  TASK_STATUS_IN_PROGRESS = 3;
  // Processing successful.
  TASK_STATUS_COMPLETED = 4;
  // Processing failed.
  TASK_STATUS_FAILED = 5;
}

// Tasks lookup information.
message ListExpressionTasksRequest {
  // Expression identifier.
  string id = 1;
}

// Expression tasks collection.
message ListExpressionTasksResponse {
  // Calculation task details.
  message Task {
    // Unique identifier.
    string id = 1;
    // Parent expression identifier.
    string expression_id = 2;
    // First parent task identifier.
    string parent_task_1_id = 3;
    // Second parent task identifier.
    string parent_task_2_id = 4;
    // First operand value.
    double arg_1 = 5;
    // Second operand value.
    double arg_2 = 6;
    // Mathematical operation.
    calculator.v1.TaskOperation operation = 7;
    // Expected processing time.
    google.protobuf.Duration operation_time = 8;
    // Processing status.
    TaskStatus status = 9;
    // Calculation result.
    double result = 10;
    // Expiration time.
    google.protobuf.Timestamp expire_at = 11;
    // Creation time.
    google.protobuf.Timestamp created_at = 12;
    // Last update time.
    google.protobuf.Timestamp updated_at = 13;
  }
  // Available tasks.
  repeated Task tasks = 1;
}
