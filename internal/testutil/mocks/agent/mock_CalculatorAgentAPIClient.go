// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	v1 "edu-final-calculate-api/pkg/calculator/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockCalculatorAgentAPIClient is an autogenerated mock type for the CalculatorAgentAPIClient type
type MockCalculatorAgentAPIClient struct {
	mock.Mock
}

type MockCalculatorAgentAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCalculatorAgentAPIClient) EXPECT() *MockCalculatorAgentAPIClient_Expecter {
	return &MockCalculatorAgentAPIClient_Expecter{mock: &_m.Mock}
}

// GetTask provides a mock function with given fields: ctx
func (_m *MockCalculatorAgentAPIClient) GetTask(ctx context.Context) (*v1.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *v1.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCalculatorAgentAPIClient_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type MockCalculatorAgentAPIClient_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCalculatorAgentAPIClient_Expecter) GetTask(ctx interface{}) *MockCalculatorAgentAPIClient_GetTask_Call {
	return &MockCalculatorAgentAPIClient_GetTask_Call{Call: _e.mock.On("GetTask", ctx)}
}

func (_c *MockCalculatorAgentAPIClient_GetTask_Call) Run(run func(ctx context.Context)) *MockCalculatorAgentAPIClient_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCalculatorAgentAPIClient_GetTask_Call) Return(_a0 *v1.Task, _a1 error) *MockCalculatorAgentAPIClient_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCalculatorAgentAPIClient_GetTask_Call) RunAndReturn(run func(context.Context) (*v1.Task, error)) *MockCalculatorAgentAPIClient_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTaskResult provides a mock function with given fields: ctx, res
func (_m *MockCalculatorAgentAPIClient) SubmitTaskResult(ctx context.Context, res *v1.SubmitTaskResultRequest) error {
	ret := _m.Called(ctx, res)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTaskResult")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.SubmitTaskResultRequest) error); ok {
		r0 = rf(ctx, res)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCalculatorAgentAPIClient_SubmitTaskResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTaskResult'
type MockCalculatorAgentAPIClient_SubmitTaskResult_Call struct {
	*mock.Call
}

// SubmitTaskResult is a helper method to define mock.On call
//   - ctx context.Context
//   - res *v1.SubmitTaskResultRequest
func (_e *MockCalculatorAgentAPIClient_Expecter) SubmitTaskResult(ctx interface{}, res interface{}) *MockCalculatorAgentAPIClient_SubmitTaskResult_Call {
	return &MockCalculatorAgentAPIClient_SubmitTaskResult_Call{Call: _e.mock.On("SubmitTaskResult", ctx, res)}
}

func (_c *MockCalculatorAgentAPIClient_SubmitTaskResult_Call) Run(run func(ctx context.Context, res *v1.SubmitTaskResultRequest)) *MockCalculatorAgentAPIClient_SubmitTaskResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.SubmitTaskResultRequest))
	})
	return _c
}

func (_c *MockCalculatorAgentAPIClient_SubmitTaskResult_Call) Return(_a0 error) *MockCalculatorAgentAPIClient_SubmitTaskResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalculatorAgentAPIClient_SubmitTaskResult_Call) RunAndReturn(run func(context.Context, *v1.SubmitTaskResultRequest) error) *MockCalculatorAgentAPIClient_SubmitTaskResult_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCalculatorAgentAPIClient creates a new instance of MockCalculatorAgentAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalculatorAgentAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalculatorAgentAPIClient {
	mock := &MockCalculatorAgentAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
