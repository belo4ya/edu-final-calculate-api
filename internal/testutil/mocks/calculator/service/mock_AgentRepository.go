// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "edu-final-calculate-api/internal/calculator/repository/models"

	mock "github.com/stretchr/testify/mock"
)

// MockAgentRepository is an autogenerated mock type for the AgentRepository type
type MockAgentRepository struct {
	mock.Mock
}

type MockAgentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentRepository) EXPECT() *MockAgentRepository_Expecter {
	return &MockAgentRepository_Expecter{mock: &_m.Mock}
}

// FinishTask provides a mock function with given fields: _a0, _a1
func (_m *MockAgentRepository) FinishTask(_a0 context.Context, _a1 models.FinishTaskCmd) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FinishTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.FinishTaskCmd) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAgentRepository_FinishTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishTask'
type MockAgentRepository_FinishTask_Call struct {
	*mock.Call
}

// FinishTask is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 models.FinishTaskCmd
func (_e *MockAgentRepository_Expecter) FinishTask(_a0 interface{}, _a1 interface{}) *MockAgentRepository_FinishTask_Call {
	return &MockAgentRepository_FinishTask_Call{Call: _e.mock.On("FinishTask", _a0, _a1)}
}

func (_c *MockAgentRepository_FinishTask_Call) Run(run func(_a0 context.Context, _a1 models.FinishTaskCmd)) *MockAgentRepository_FinishTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.FinishTaskCmd))
	})
	return _c
}

func (_c *MockAgentRepository_FinishTask_Call) Return(_a0 error) *MockAgentRepository_FinishTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAgentRepository_FinishTask_Call) RunAndReturn(run func(context.Context, models.FinishTaskCmd) error) *MockAgentRepository_FinishTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetPendingTask provides a mock function with given fields: _a0
func (_m *MockAgentRepository) GetPendingTask(_a0 context.Context) (models.Task, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingTask")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (models.Task, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) models.Task); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentRepository_GetPendingTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPendingTask'
type MockAgentRepository_GetPendingTask_Call struct {
	*mock.Call
}

// GetPendingTask is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockAgentRepository_Expecter) GetPendingTask(_a0 interface{}) *MockAgentRepository_GetPendingTask_Call {
	return &MockAgentRepository_GetPendingTask_Call{Call: _e.mock.On("GetPendingTask", _a0)}
}

func (_c *MockAgentRepository_GetPendingTask_Call) Run(run func(_a0 context.Context)) *MockAgentRepository_GetPendingTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAgentRepository_GetPendingTask_Call) Return(_a0 models.Task, _a1 error) *MockAgentRepository_GetPendingTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentRepository_GetPendingTask_Call) RunAndReturn(run func(context.Context) (models.Task, error)) *MockAgentRepository_GetPendingTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAgentRepository creates a new instance of MockAgentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentRepository {
	mock := &MockAgentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
