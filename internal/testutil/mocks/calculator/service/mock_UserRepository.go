// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "edu-final-calculate-api/internal/calculator/repository/sqlite/models"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, cmd
func (_m *MockUserRepository) GetUser(ctx context.Context, cmd models.GetUserCmd) (*models.User, error) {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserCmd) (*models.User, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.GetUserCmd) *models.User); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.GetUserCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd models.GetUserCmd
func (_e *MockUserRepository_Expecter) GetUser(ctx interface{}, cmd interface{}) *MockUserRepository_GetUser_Call {
	return &MockUserRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, cmd)}
}

func (_c *MockUserRepository_GetUser_Call) Run(run func(ctx context.Context, cmd models.GetUserCmd)) *MockUserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.GetUserCmd))
	})
	return _c
}

func (_c *MockUserRepository_GetUser_Call) Return(_a0 *models.User, _a1 error) *MockUserRepository_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUser_Call) RunAndReturn(run func(context.Context, models.GetUserCmd) (*models.User, error)) *MockUserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, cmd
func (_m *MockUserRepository) Register(ctx context.Context, cmd models.RegisterUserCmd) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterUserCmd) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserRepository_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd models.RegisterUserCmd
func (_e *MockUserRepository_Expecter) Register(ctx interface{}, cmd interface{}) *MockUserRepository_Register_Call {
	return &MockUserRepository_Register_Call{Call: _e.mock.On("Register", ctx, cmd)}
}

func (_c *MockUserRepository_Register_Call) Run(run func(ctx context.Context, cmd models.RegisterUserCmd)) *MockUserRepository_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.RegisterUserCmd))
	})
	return _c
}

func (_c *MockUserRepository_Register_Call) Return(_a0 error) *MockUserRepository_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_Register_Call) RunAndReturn(run func(context.Context, models.RegisterUserCmd) error) *MockUserRepository_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
