// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "edu-final-calculate-api/internal/calculator/calc/types"
)

// MockCalculator is an autogenerated mock type for the Calculator type
type MockCalculator struct {
	mock.Mock
}

type MockCalculator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCalculator) EXPECT() *MockCalculator_Expecter {
	return &MockCalculator_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: _a0
func (_m *MockCalculator) Parse(_a0 string) ([]types.Token, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []types.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Token, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Token); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCalculator_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type MockCalculator_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCalculator_Expecter) Parse(_a0 interface{}) *MockCalculator_Parse_Call {
	return &MockCalculator_Parse_Call{Call: _e.mock.On("Parse", _a0)}
}

func (_c *MockCalculator_Parse_Call) Run(run func(_a0 string)) *MockCalculator_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCalculator_Parse_Call) Return(_a0 []types.Token, _a1 error) *MockCalculator_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCalculator_Parse_Call) RunAndReturn(run func(string) ([]types.Token, error)) *MockCalculator_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Schedule provides a mock function with given fields: _a0
func (_m *MockCalculator) Schedule(_a0 []types.Token) []types.Task {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Schedule")
	}

	var r0 []types.Task
	if rf, ok := ret.Get(0).(func([]types.Token) []types.Task); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Task)
		}
	}

	return r0
}

// MockCalculator_Schedule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Schedule'
type MockCalculator_Schedule_Call struct {
	*mock.Call
}

// Schedule is a helper method to define mock.On call
//   - _a0 []types.Token
func (_e *MockCalculator_Expecter) Schedule(_a0 interface{}) *MockCalculator_Schedule_Call {
	return &MockCalculator_Schedule_Call{Call: _e.mock.On("Schedule", _a0)}
}

func (_c *MockCalculator_Schedule_Call) Run(run func(_a0 []types.Token)) *MockCalculator_Schedule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.Token))
	})
	return _c
}

func (_c *MockCalculator_Schedule_Call) Return(_a0 []types.Task) *MockCalculator_Schedule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalculator_Schedule_Call) RunAndReturn(run func([]types.Token) []types.Task) *MockCalculator_Schedule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCalculator creates a new instance of MockCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalculator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalculator {
	mock := &MockCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
